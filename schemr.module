<?php

/**
 *
 */

/**
 * Implementation of hook_menu().
 */
function schemr_menu() {
	$items = array();

	$items['admin/content/types/schemr'] = array(
		'title' => 'Schemr',
		'page callback' => 'schemr_show_diagram',
		'access arguments' => array('administer content types'),
		'type' => MENU_LOCAL_TASK,
	);
	
	$items['admin/content/types/schemr/view'] = array(
		'title' => 'View Schema Diagram',
		'page callback' => 'schemr_show_diagram',
		'access arguments' => array('administer content types'),
		'type' => MENU_LOCAL_TASK,
		'weight' => -50,
	);
	
	$items['admin/content/types/schemr/configure'] = array(
		'title' => 'Configure Schemr',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('schemr_admin_configure'),
		'access arguments' => array('administer content types'),
		'type' => MENU_LOCAL_TASK,
		'weight' => -49,
	);
	
	$items['admin/content/types/schemr/ajax'] = array(
		'page callback' => 'schemr_ajax_callback',
		'access arguments' => array('administer content types'),
		'type' => MENU_CALLBACK,
	);
	
	$items['admin/content/types/schemr/pdf'] = array(
		'page callback' => 'schemr_generate_pdf',
		'access arguments' => array('administer content types'),
	    'file' => 'schemr.pdf.inc',
		'type' => MENU_CALLBACK,
	);
	
	return $items;	
}

/**
 * Display a Schemr diagram
 */
function schemr_show_diagram() {
	$ret = array();
	
	if (!function_exists('content_types') || !function_exists('content_fields'))
		return "This module is not useful until you install CCK.";

	$site_name = variable_get('site_name', '');
	$bp = base_path();
	$mp = drupal_get_path('module', 'schemr');
	$path = $bp . $mp;
	
	$pdf = '';
	if (file_exists($mp . '/fpdf/fpdf.php')) 
		$pdf = '<a target="_blank" href="' . $bp . 'admin/content/types/schemr/pdf">PDF</a>';
	
	$ret[] = <<<ENDL
<!doctype html>
<html>
<head>
<meta charset="UTF-8" />
<title>Schemr Content Type Diagram for "$site_name"</title>
<link rel="stylesheet" type="text/css" href="$path/schemr.css" />
<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.6.1/jquery.min.js"></script>
<script type="text/javascript" src="$path/schemr.js"></script>
<script type="text/javascript" src="$path/jquery.easydrag.handler.beta2.js"></script>
<script type="text/javascript">
var base_path = '$bp';
</script>
</head>
<body>
<header>
	Schemr Content Type Diagram for &quot;$site_name&quot;
	$pdf
	<a href="#" class="reset">Reset Layout</a>
	<a href="#" class="save">Save Layout</a>
</header>
<section>
	<div id="scrollpane"><div id="canvas"></div></div>
</section>
</body>
</html>
ENDL;
/*
	$ctypes = content_types();
	foreach ($ctypes as $ctype) {
		$ret[] = $ctype['type'] . '<br />';
	}
	$ret[] = print_r($ctypes, TRUE);
*/
	print implode("\n", $ret);
	die();
}


/**
 * Display the Schemr configuration form.
 */
function schemr_admin_configure(&$form_state, $module = NULL, $delta = 0) {
	$form['schemr_directory'] = array(
		'#type' => 'textfield',
		'#description' => t('Path in which Schemr will store its data files. This defaults to your files directory, but you should change this if you exclude that directory from being tracked by your revision control system.'),
		'#title' => t('Schemr Data Path'),
		'#default_value' => variable_get('schemr_directory', file_directory_path() . '/schemr'),
	);
	
	return system_settings_form($form);
}

/**
 * Utility function to create field classes with the appropriate entries. We cache fields
 * so we can track whether they're shared or not.
 */
function schemr_ajax_generate_field($machine_name, $multiple, $type, $ctype) {
	static $fields = array();
	static $fielddata = null;
	
	if ($fielddata == null) {
		$fielddata = array();
		$f = content_fields();
		schemr_recursive_ksort($f);
		foreach($f as $entry) {
			$fielddata[$entry['field_name']][$entry['type_name']] = $entry;
		}
	}
	
	if (isset($fields[$machine_name])) {
		$fields[$machine_name]->shared = 1;
		return $fields[$machine_name];
	}
	
	$field = new stdClass();
	
	$field->machine_name = $machine_name;
	$field->multiple = $multiple;
	$field->notes = '';
	$field->type = $type;
	$field->data = content_fields($machine_name, $ctype);
	switch ($type) {
		case 'nodereference':
			// TODO: Pull the allowable target ctypes here. If there are fewer than three, show them
			// If there are >=3, show "many"
			$field->notes = 'TODO';
			break;
	}
	$field->shared = 0;
	
	$fields[$machine_name] = $field;
	
	return $fields[$machine_name];
}

function schemr_ajax_generate_group($name, $label) {
	$group = new stdClass();
	
	$group->name = $name;
	$group->label = $label;
	$group->fields = array();
	
	return $group;
}

/**
 * Recursively keysort an array
 */
function schemr_recursive_ksort(&$array) {
	if (!is_array($array)) return false;
	
	ksort($array);
	foreach ($array as $key => $value) {
		schemr_recursive_ksort($array[$key]);
	}
	
	return true;
}

/**
 * Credit to: https://gist.github.com/906036
 *
 * Indents a flat JSON string to make it more human-readable.
 * Stolen from http://recursive-design.com/blog/2008/03/11/format-json-with-php/
 * and adapted to put spaces around : characters.
 *
 * @param string $json The original JSON string to process.
 *
 * @return string Indented version of the original JSON string.
 */
function schemr_json_indent($json) {
	$result      = '';
	$pos         = 0;
	$strLen      = strlen($json);
	$indentStr   = '  ';
	$newLine     = "\n";
	$prevChar    = '';
	$outOfQuotes = true;

	for ($i=0; $i<=$strLen; $i++) {

		// Grab the next character in the string.
		$char = substr($json, $i, 1);

		// Put spaces in front of :
		if ($outOfQuotes && $char == ':' && $prevChar != ' ') {
			$result .= ' ';
		}

		if ($outOfQuotes && $char != ' ' && $prevChar == ':') {
			$result .= ' ';
		}

		// Are we inside a quoted string?
		if ($char == '"' && $prevChar != '\\') {
			$outOfQuotes = !$outOfQuotes;

			// If this character is the end of an element, 
			// output a new line and indent the next line.
		} else if(($char == '}' || $char == ']') && $outOfQuotes) {
			$result .= $newLine;
			$pos --;
			for ($j=0; $j<$pos; $j++) {
				$result .= $indentStr;
			}
		}

		// Add the character to the result string.
		$result .= $char;

		// If the last character was the beginning of an element, 
		// output a new line and indent the next line.
		if (($char == ',' || $char == '{' || $char == '[') && $outOfQuotes) {
			$result .= $newLine;
			if ($char == '{' || $char == '[') {
				$pos ++;
			}

			for ($j = 0; $j < $pos; $j++) {
				$result .= $indentStr;
			}
		}

		$prevChar = $char;
	}

	return $result;
}

function schemr_generate_type_tree() {
	$results = array();
	$fields = array();
	
	$ctypes = content_types();
	foreach ($ctypes as $ctype) {
		$groups = array('base' => schemr_ajax_generate_group('base', 'Base'));
		
		$field_groups = array();
		$gs = fieldgroup_groups($ctype['type'], TRUE);
		foreach ($gs as $g) {
			foreach ($g['fields'] as $f) {
				$field_groups[$f['field_name']] = $g['group_name'];
			}
			$groups[$g['group_name']] = schemr_ajax_generate_group($g['group_name'], $g['label']);
		}				
		
		$result = new stdClass();
		$result->type = $ctype['type'];
		$result->label = $ctype['name'];				
		
		if ($ctype['has_title'])
			$groups['base']->fields['title'] = schemr_ajax_generate_field('title', 0, 'text', $ctype['type']);
		
		if ($ctype['has_body'])
			$groups['base']->fields['body'] = schemr_ajax_generate_field('body', 0, 'text', $ctype['type']);				

		foreach ($ctype['fields'] as $f) {
			$name = $f['field_name'];
			$field = schemr_ajax_generate_field($name, $f['multiple'] == 0 ? 0 : 1, $f['type'], $ctype['type']);
			if (!isset($field_groups[$name])) {
				$groups['base']->fields[$name] = $field;
			} else {
				$groups[$field_groups[$name]]->fields[$name] = $field;
			}
		}

		foreach ($groups as $g) {
			$g->fields = array_values($g->fields);
		}
		
		$result->groups = array_values($groups);
		$results[] = $result;
	}
	
	return $results;
}

function schemr_load_diagram() {
	$path = schemr_get_data_path();
	$r = file_get_contents($path . '/diagram.profile');

	return $r;
}

/**
 * Supplies the canvas display with data
 */
function schemr_ajax_callback() {
	$path = schemr_get_data_path();
	
	switch ($_REQUEST['r']) {
		case 'types':
			print json_encode(schemr_generate_type_tree());
			break;

		case 'save':
			// Sanitize our inputs. We do have some level of trust for this user because they
			// have the "administer content types" privilege, so some of this is also about
			// normalizing data to deal with potential bugs.
			$ctypes = content_types();
			$savedata = array();
			$data = $_REQUEST['d'];
			if (!is_array($data)) die("Invalid Request");
			foreach ($data as $entry) {
				$name = $entry['ctype'];
				if (!isset($ctypes[$name])) continue;

				$sd = new stdClass();
				$sd->ctype = $name;
				$sd->left = min(max(intval($entry['left']), 0), 99999);
				$sd->top = min(max(intval($entry['top']), 0), 99999);
				$savedata[] = $sd;
			}
			
			$r = file_put_contents($path . '/diagram.profile', json_encode($savedata));
			print "OK";
			break;
		
		case 'load':
			print schemr_load_diagram();
			break;
	}
	
	die();
}

function schemr_get_data_path() {
	$path = variable_get('schemr_directory', file_directory_path() . '/schemr');
	
	if (!is_dir($path)) @mkdir($path);
	if (!is_dir($path)) {
		watchdog('schemr', 'Unable to create Schemr data directory: ' . $path, WATCHDOG_ERROR);
	}
	
	return $path;
}